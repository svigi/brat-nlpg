# Simple text-based definitions of hierarchial ontologies of 
# (physical) entity types, relation types, event types, and
# attributes.

# This is a minimal example configuration. Please edit according to
# the needs of your annotation.

[entities]

# Definition of entities.

# Format is a simple list with one type per line.

Protein
Entity
Ujentity

[relations]

# Definition of (binary) relations.

# Format in brief: one relation per line, with first space-separated
# field giving the relation type and the rest of the line the
# comma-separated arguments in ROLE:TYPE format. The roles are
# typically "Arg1" and "Arg2".

#Equiv	Arg1:Protein, Arg2:Protein, <REL-TYPE>:symmetric-transitive

[events]

# Definition of events.

# Format in brief: one event per line, with first space-separated
# field giving the event type and the rest of the line the
# comma-separated arguments in ROLE:TYPE format. Arguments may be
# specified as either optional (by appending "?" to role) or repeated
# (by appending either "*" for "0 or more" or "+" for "1 or more").

#Gene_expression	Theme:Protein
#Binding	Theme+:Protein, Site*:Entity
#Phosphorylation	Theme:Protein, Site?:Entity


[attributes]

# Definition of entity and event attributes.

# Format in brief: first tab-separated field is attribute name, second
# a set of key-value pairs. The latter must define "Arg:" which
# specifies what the attribute can attach to (typically "<EVENT>").
# If no other keys are defined, the attribute is taken to be a binary
# flag; otherwise other keys are possible attribute values, and their
# values (the keys') are glyphs to show in visualization if the attribute
# has a non-default value. Default is specified by the special key value
# <DEFAULT>, and the special key value <GLYPH-POS> (value either "left"
# or "right") defines where to show the glyph (default "right").

#Negation	Arg:<EVENT>
#Speculation	Arg:<EVENT>
